PROGRAM RoughDiff
  IMPLICIT NONE
  INCLUDE 'mpif.h'

  CHARACTER(200) :: wdir
  REAL*8 :: Sigma0,Lo,alpha ! Macroscopic load and scale
  REAL*8 :: Hu,qmax,qL,dz,mexp,nexp,Co,alphai,betai, &
       Anon,Apl,Aplpr,Anonpr,dimfac,zetan,zetan2,fzetan,fzetan2,dzetan,Al,Ael,eta
  REAL*8 :: dsig,dzeta,dmu,i2dsig,idsig,sigYmax,sigY0,Pszm,zetamax,fzmax,fzmin,dzetamax
  INTEGER :: nz,nsig,nsp,ierr, si, zi, myrank, NPU, nznpu,size,soindex
  
  INTEGER :: ntot,sni,sne,ni,ntotsub,nintz,next,Nred
  REAL*8  :: myni,ni2,dmuint,sfzint,rr2
  REAL*8  :: s0sy, sns0, npsy, mysign,mypref,mysns0,mynpsy,nexpo,xx,zetarep,zetarep2
  REAL*8, DIMENSION(:), ALLOCATABLE :: Pz,Pnon,Ppl
  
  INTEGER :: outstepsize
  REAL*8 :: zoutfac,zetaoprev,rr
  REAL*8, DIMENSION(:), ALLOCATABLE :: Cq,zetas,mus,sigY,dsigY,fz,sfz,sig
  REAL*8, DIMENSION(:), ALLOCATABLE :: dpdzo,dpdzo2,Psz,Pszpr,PszB,PszE,Pszall,Pzsum, &
       Pplsum,Pnonsum
  INTEGER :: syindex,syrank,syrankall
  REAL*8 :: Ey, nu, pi, Eyp
  
  PARAMETER(Ey = 1.d11, &  ! Young's modulus
       nu = 0.25)          ! Poisson's ratio
       
  PARAMETER (pi=3.141592653589793d0)
  
  ! ---------------------------------------------------
  ! Initialize MPI
  CALL MPI_Init(ierr)
  CALL MPI_Comm_rank(MPI_COMM_WORLD,myrank,ierr)
  CALL MPI_Comm_size(MPI_COMM_WORLD,size,ierr)
  NPU = size ! Number of cores
  Nred = 2*NPU
  ! Discretization in stress space should be a multiple of NPU

  CALL readinput(wdir)
  CALL FLUSH(6)
  IF(myrank.EQ.0)THEN
     write(*,*) "opening files"
     write(*,*) trim(wdir)
     OPEN(100, FILE = trim(wdir)//'/1_contact')
     write(*,*) "opened contact"
     OPEN(101, FILE = trim(wdir)//'/1_Pzeta')
     OPEN(102, FILE = trim(wdir)//'/1_areaAnalytic')
     OPEN(103, FILE = trim(wdir)//'/1_roughness')
     write(*,*) "files opened"
  ENDIF
  CALL MPI_Barrier(MPI_COMM_WORLD,ierr)
  outstepsize = 10

  zoutfac = 2    ! Output every factor of 2 magnification 
  
  ! --------------------------------------------------
  ! Create input criteria for roughness power spectrum and diffusivity
  
  zetamax = 1.d3 ! maximum magnification
  
  Lo = 1.d0 ! Apparent area (1 cm)
  qL = 2.d0*pi/ Lo

  Co = 1.d-5 !1.d-8 1.d-2  ! 1.d-12   ! Scaling for PSD (m^3)
  Hu = 0.6d0   ! Hurst exponent
  mexp = -1.d0 - 2.d0*Hu ! 1D PSD
  !mexp = -2.d0*(Hu+1.d0) ! 2D PSD

  ! Find representative magnification to calculate maximum diffusivity
  IF(Hu .LT. 0.5d0)THEN
     zetarep = zetamax
     zetarep2 = 1
  ELSE
     zetarep = 1
     zetarep2 = zetamax
  ENDIF
  ! -------------------------------------------------- 
  ! Create stress-space and structure I.C. and B.C.s
  ! B.C.s
  ! P(sig=0,zeta) = 0
  ! P(sig,zeta = 1) = delta(sig - sig0)
  ! Need to solve for B.C at sigma = sigma_{Y}(zeta)

  ! Yield stress
  sigY0 = 1.d10
  sigYmax = sigY0
  
  ! applied load
  sigma0 = 0.1d0 * sigY0
  
  ! Discrtization in stress-space
  !dsig = 5d-4 * sigma0 
  dsig = 1.d-2*sigma0
  ! sigma0 = 0.1, dsig = 0.1*sigma0

  ! Non-dimensionalize stresses
  dimfac = dsig
  sigma0 = sigma0 / dimfac
  sigY0 = sigY0 / dimfac
  dsig = dsig / dimfac

  ! Total number of cells in stress-space
  nsig = nint( sigY0 / dsig ) + 1
  nsp = nsig/NPU         ! find integer multiple of NPUs
  nsp = nsp + 1          ! number of stress discretization points per CPU
  nsig = nsp * NPU       ! total number of stress discretization points
  dsig = sigY0 / dfloat(nsig-1)

  IF(myrank.EQ.0)THEN
     WRITE(*,*) nsig, nsp, Sigma0, sigY0, sigYmax
  ENDIF
  ALLOCATE(sig(nsp),stat=ierr)
  ALLOCATE(Psz(nsp),Pszpr(nsp),stat=ierr)
  IF(myrank.EQ.0)THEN
     ALLOCATE(Pszall(nsig),stat=ierr)
  ENDIF
  soindex = -555
  syindex = -55
  syrank = -555
  DO si = 1,nsp
     sig(si) = (myrank*nsp + si-1)*dsig   
     Psz(si) = 0.d0
     Pszpr(si) = 0.d0
     
     ! Find index for macroscopic load and apply I.C.
     IF((sig(si).GE.sigma0).AND.(sig(si).LT.(sigma0+dsig)))THEN
        Psz(si) = 1.d0/dsig
        Pszpr(si) = 1.d0/dsig
        soindex = si
     ENDIF
     IF(sig(si).GE.sigY0)THEN
        syindex = si
        syrank = myrank
     ENDIF
  END DO

  CALL MPI_Allreduce(syrank,syrankAll,1,MPI_INTEGER,MPI_MAX,MPI_COMM_WORLD,ierr)
  syrank = syrankAll
  IF(myrank.EQ.syrank)THEN
     WRITE(*,*) syrank,syindex
  ENDIF

  Eyp = Ey / dimfac

  ! --------------------------------------------------
  ! Create roughness power spectrum
  alpha = 0.25d0*0.0625d0
  !alpha = 0.25d0
  !alpha = 0.0625d0
  ! --------------------------------------------------
  ! Solve diffusion equation with magnification
  ALLOCATE(dpdzo(nsp),dpdzo2(nsp),stat=ierr)
  ALLOCATE(PszB(NPU),PszE(NPU),stat=ierr)

  ! Initial relative area of plastic contact is zero
  nz = 1
  Ael = 0.d0
  Al = 0.d0
  zetan = 1.d0
  Aplpr = 0.d0
  Apl = 0.d0
  Anon = 0.d0
  Anonpr = 0.d0
  idsig = 1.d0/dsig
  i2dsig = 0.5d0*idsig*idsig
  zi = 1
  CALL MPI_GATHER(Psz,nsp,MPI_REAL8,Pszall,nsp,MPI_REAL8,0,MPI_COMM_WORLD,ierr)

  DO si = 1,nsp
     Al = Al + Psz(si)
  END DO
  Al = Al * dsig

  CALL MPI_REDUCE(Al,Ael,1,MPI_REAL8,MPI_SUM,0,MPI_COMM_WORLD,ierr)

  IF(myrank.EQ.0)THEN
     WRITE(100,401) zetan, Ael, Anon, Apl   ! Output area of contact at every zeta step   
     CALL PRINTPSD(101,Pszall,zetan,nsig,outstepsize)
  ENDIF
  zetaoprev = zetan
  
  IF(myrank.EQ.0)THEN
     WRITE(*,*) "starting main loop"
  ENDIF

  CALL CalcFzMax(fzetan,zetan,qL,Eyp,nu,Co,mexp)
  dzetan = alpha * dsig*dsig/fzetan  ! calculate zeta step
  zetan2 = zetan+dzetan
  CALL CalcFzMax(fzetan2,zetan2,qL,Eyp,nu,Co,mexp)
  zetan = zetan + dzetan


  IF(myrank.EQ.0)THEN
     WRITE(*,*) fzetan,fzetan2,dzetan
  ENDIF

  DO WHILE(zetan.LE.zetamax)

     ! We will use 2nd-order accurate Crank-Nicolson
     rr = dzetan*fzetan*i2dsig
     rr2 = dzetan*fzetan2*i2dsig
     Psz =  CalcLaplacian(Pszpr,nsp,rr,rr2,myrank,syrank,NPU,Nred,ierr)


     ! Calculate area of elastic contact
     Al = 0.d0
     DO si = 1, nsp
        Al = Al + Psz(si)
     END DO
     Al = Al * dsig

     CALL MPI_REDUCE(Al,Ael,1,MPI_REAL8,MPI_SUM,0,MPI_COMM_WORLD,ierr)

     ! Solve for area of plastic and non-contact
     IF(myrank.EQ.syrank)THEN
        Apl = Aplpr + 0.5d0*idsig*dzetan*(fzetan*&
             (-0.5d0*Pszpr(syindex-2)+2.d0*Pszpr(syindex-1)) + &
             fzetan2* &
             (-0.5d0*Psz(syindex-2)+2.d0*Psz(syindex-1)))
        
     ENDIF
     CALL MPI_BCAST(Apl,1,MPI_REAL8,syrank,MPI_COMM_WORLD,ierr)
     IF(myrank.EQ.0)THEN
        Anon = Anonpr + 0.5d0*idsig*dzetan*(fzetan* &
             (-0.5d0*Pszpr(3) + 2.d0*Pszpr(2))&
             +fzetan2* & 
             (-0.5d0*Psz(3) + 2.d0*Psz(2)))
        WRITE(100,401) zetan, Ael, Anon, Apl   ! Output area of contact at every zeta step 
     ENDIF
     ! Save updated value as previous entry for next step
     DO si = 1,nsp
        Pszpr(si) = Psz(si)
     END DO
     Aplpr = Apl
     Anonpr = Anon
     
     IF(zetan.GE.(zoutfac*zetaoprev))THEN
        CALL MPI_GATHER(Psz,nsp,MPI_REAL8,Pszall,nsp,MPI_REAL8,0,MPI_COMM_WORLD,ierr)
        IF(myrank.EQ.0)THEN
           CALL PRINTPSD(101,Pszall,zetan,nsig,outstepsize)
        ENDIF
        zetaoprev = zetan
     ENDIF
     
     ! Solve for new diffusivities and time step
     zetan = zetan2
     fzetan = fzetan2
     dzetan = alpha * dsig*dsig/fzetan  ! calculate zeta step
     zetan2 = zetan+dzetan
     CALL CalcFzMax(fzetan2,zetan2,qL,Eyp,nu,Co,mexp)
     nz = nz + 1
     !zetan = zetan + dzetan
  END DO

  IF(myrank.EQ.0)THEN
     WRITE(*,*) "finished main loop ",nz
  ENDIF

  nz = 101
  nintz = 1000
  dmu = log(zetamax)/dfloat(nz-1)
  dmuint = log(zetamax)/dfloat(nintz-1)
  ALLOCATE(sfz(nz),fz(nz),zetas(nz),Cq(nz),stat=ierr)
  sfz(1) = 0.d0
  next = 1
  zetan = 1.d0
  zetas(1) = zetan
  CALL calcFz(fzetan2,zetan,qL,Eyp,nu,Co,mexp)
  CALL calcCq(Cq(1),Co,mexp,zetan)
  fz(1) = fzetan2
  sfzint = 0.d0
  zetan2 = 1.d0
  DO zi = 2,nintz
     zetan = dexp(dmuint*dfloat(zi-1))
     CALL calcFz(fzetan,zetan,qL,Eyp,nu,Co,mexp)
     sfzint = sfzint + 0.5d0*dmuint*(zetan*fzetan+zetan2*fzetan2)
     IF(zetan.GE.dexp(dmu*dfloat(next)))THEN
        CALL calcCq(Cq(next+1),Co,mexp,zetan)
        fz(next+1) = fzetan
        sfz(next+1) = sfzint/sigY0/sigY0
        zetas(next+1) = zetan
        next = next + 1
     ENDIF
     fzetan2 = fzetan
     zetan2 = zetan
  END DO

  !! --------------------------------------------------------------
  !!                    Analytical solution
  !! --------------------------------------------------------------
  ALLOCATE(Pz(nz),Pnon(nz),Ppl(nz),STAT=ierr)
  IF(myrank.EQ.0)THEN
     ALLOCATE(Pzsum(nz),Pnonsum(nz),Pplsum(nz),STAT=ierr)
     DO zi = 1,nz
        Pzsum(zi) = 0.d0
        Pnonsum(zi) = 0.d0
        Pplsum(zi) = 0.d0
     END DO
     WRITE(*,*) "allocated"
  ENDIF

  DO zi = 1, nz
     Pz(zi) = 0.d0
     Pnon(zi) = 0.d0
     Ppl(zi) = 0.d0
  END DO
  

  xx = pi * sigma0/sigY0
  ntot = 100000

  eta = 1.d-3
  ntot = nint(-1.d0*log(eta)/(pi*pi*sfz(2)))
  ntotsub = ntot / NPU
  IF(ntotsub.LT.10) ntotsub = 10
  If(myrank.EQ.0)THEN
     WRITE(*,*) ntot,ntotsub,sfz(2)
  ENDIF
  sni = (myrank*ntotsub + 1)
  sne = (myrank+1)*ntotsub

  DO ni = sni, sne
     ni2  = dfloat(ni)
     sns0 = DSIN( ni2 * xx) / ni2
     npsy = (ni2 * pi) **2.d0
     mysign = (-1.d0)**(dfloat(ni)+1.d0)

     ! For Pz
     myni = dfloat(2*ni - 1)
     mysns0 = DSIN(myni * xx) / myni
     mynpsy = (myni * pi) **2
     
     DO zi = 1, nz
        nexpo =  dexp(-1.d0 * npsy * sfz(zi))
        
        Pz(zi) = Pz(zi) + mysns0 * dexp(-1.d0 * mynpsy * sfz(zi))
        Pnon(zi) = Pnon(zi) + sns0 * nexpo
        Ppl(zi) = Ppl(zi) + mysign * sns0 * nexpo
     END DO     
  END DO

  IF(myrank.EQ.0)THEN
     WRITE(*,*) "reducing"
  ENDIF
  CALL MPI_REDUCE(Pz,Pzsum,nz,MPI_REAL8,MPI_SUM,0,MPI_COMM_WORLD,ierr)
  CALL MPI_REDUCE(Pnon,Pnonsum,nz,MPI_REAL8,MPI_SUM,0,MPI_COMM_WORLD,ierr)
  CALL MPI_REDUCE(Ppl,Pplsum,nz,MPI_REAL8,MPI_SUM,0,MPI_COMM_WORLD,ierr)
  
  IF(myrank.EQ.0)THEN
     WRITE(*,*) "done counting"
     DO zi = 1, nz
        Pzsum(zi) = (4.d0/pi) * Pzsum(zi)
        Pplsum(zi) = sigma0/sigY0 - (2.d0/pi)*Pplsum(zi)
        Pnonsum(zi) = (1.d0 - sigma0/sigY0) - (2.d0/pi)*Pnonsum(zi)
        WRITE(102,401) zetas(zi),Pzsum(zi),Pnonsum(zi),Pplsum(zi)
        WRITE(103,400) zetas(zi),fz(zi),Cq(zi)
     END DO
  ! at each time step want to calculate Pzeta, Pnon, Ppl
  ! will also want to calculate P(sigma,zeta)
     WRITE(*,*) "done writing"
     CLOSE(101)
     CLOSE(100)
     CLOSE(102)
     CLOSE(103)
  ENDIF
400 format (3(1X,E15.7E3))  ! 1_contact
401 format (4(1X,E15.7E3))  ! analytic
  ! Deallocate arrays
  IF(ALLOCATED(Pszpr)) DEALLOCATE(Pszpr)
  IF(ALLOCATED(Psz)) DEALLOCATE(Psz)
  IF(ALLOCATED(Pszall)) DEALLOCATE(Pszall)
  IF(ALLOCATED(zetas)) DEALLOCATE(zetas)
  IF(ALLOCATED(sig)) DEALLOCATE(sig)
  IF(ALLOCATED(sfz)) DEALLOCATE(sfz)
  IF(ALLOCATED(fz)) DEALLOCATE(fz)
  IF(ALLOCATED(Cq)) DEALLOCATE(Cq)
  IF(ALLOCATED(dpdzo)) DEALLOCATE(dpdzo)
  IF(ALLOCATED(dpdzo2)) DEALLOCATE(dpdzo2)
  IF(ALLOCATED(PszB)) DEALLOCATE(PszB,PszE)
  IF(ALLOCATED(Pz)) DEALLOCATE(Pz,Pnon,Ppl)
  IF(ALLOCATED(Pzsum)) DEALLOCATE(Pzsum,Pnonsum,Pplsum)
  
  CALL MPI_FINALIZE(ierr)
CONTAINS  
  !!--------------------------------------------------
  !!                  Sub-routines
  !! -------------------------------------------------

  !---------------------------------------------------
  SUBROUTINE calcCq(Cq,Co,mexp,zeta)
    IMPLICIT NONE
    REAL*8 Cq,Co,mexp,zeta
    Cq = Co * zeta**mexp
    RETURN
  END SUBROUTINE calcCq

  !--------------------------------------------------
  ! Calculate the laplacian of P using modified Thomas Algorithm
  ! for parallelized solver for tridiagonal operation
  FUNCTION CalcLaplacian(Pszpr,nsp,rr,rr2,myrank,syrank,NPU,Nred,ierr)
    IMPLICIT NONE
    INCLUDE 'mpif.h'
    INTEGER :: i, nsp, myrank, ierr, NPU, Nred, syrank
    REAL*8, DIMENSION(:) :: Pszpr
    REAL*8, DIMENSION(nsp) :: d,cca,ccc!b,ccc
    REAL*8 :: rr,bcen,r,rr2,bcen2,nrr2
    REAL*8, DIMENSION(Nred) :: dred(Nred),ared(Nred),bred(Nred),cred(Nred)
    REAL*8, DIMENSION(2) :: dredsub,aredsub,bredsub,credsub
    REAL*8, DIMENSION(NPU) :: PszB,PszE
    REAL*8, DIMENSION(nsp) :: CalcLaplacian

    bcen2 = 1.d0 + 2.d0*rr2   ! b_ij for new time step
    nrr2  = -1.d0*rr2         ! a_ij, c_ij for new time step

    !rr = 0.d0                 ! backward Euler
    bcen  = 1.d0 - 2.d0*rr    ! b_ij for prev time step
    
    ! Problem is set up to use Crank-Nicolson implicit solver, 2nd-order acc in space and time
    ! Note that case where rr = 0 is backward Euler solution, 2nd-order acc in space, 1st-order in time
    CALL MPI_Allgather(Pszpr(1),1,MPI_REAL8,PszB,1,MPI_REAL8,MPI_COMM_WORLD,ierr)
    CALL MPI_Allgather(Pszpr(nsp),1,MPI_REAL8,PszE,1,MPI_REAL8,MPI_COMM_WORLD,ierr)

    ! Implement Sigma = 0 B.C.
    IF(myrank.EQ.0)THEN
       d(1)   = 0.d0
       cca(1) = 0.d0
       ccc(1) = 0.d0
    ELSE
       d(1)   = rr*(PszE(myrank)+Pszpr(2)) + bcen*Pszpr(1)
       d(1)   = d(1) / bcen2
       ccc(1) = nrr2/bcen2
       cca(1) = nrr2/bcen2
    ENDIF

    d(2)   = rr*(Pszpr(1) + Pszpr(3)) + bcen*Pszpr(2)
    d(2)   = d(2) / bcen2
    ccc(2) = nrr2/bcen2
    cca(2) = nrr2/bcen2

    ! Modified Thomas algorithm
    ! We first want to transform every submatrix into a form
    ! where the diagonal will take b_{ij}' = 1 and the 
    ! equations for each row are a function of the first and last column
    ! while the lower and upper diagonal elements set to zero
    ! i.e. the equations for each line will relate the solution x_{i} to
    ! the first and last solution x_{1} and x_{nsp}
    
    ! remove lower diagonal element starting at third row
    DO i = 3,(nsp-1)
       d(i)   = rr*(Pszpr(i-1)+Pszpr(i+1)) + bcen*Pszpr(i)
       r      = 1.d0/(bcen2 + rr2*ccc(i-1))   
       d(i)   = r*(d(i) + rr2*d(i-1))
       ccc(i) = r*nrr2
       cca(i) = r*rr2*cca(i-1)
    END DO

    ! Implement Sigma_{Y} B.C.
    IF(myrank.EQ.syrank)THEN
       d(nsp)   = 0.d0
       ccc(nsp) = 0.d0
       cca(nsp) = 0.d0
    ELSE
       d(nsp)   = rr*(PszB(myrank+2)+Pszpr(nsp-1)) + bcen*Pszpr(nsp)
       r        = 1.d0/(bcen2 + rr2*ccc(nsp-1))
       d(nsp)   = r*(d(nsp) + rr2*d(nsp-1))
       ccc(nsp) = r*nrr2
       cca(nsp) = r*rr2*cca(nsp-1)
    ENDIF

    ! Back substitute to remove  upper diagonal element
    DO i = (nsp-2),2,-1
       d(i)   = d(i) - ccc(i)*d(i+1)
       ccc(i) = -1.d0*ccc(i)*ccc(i+1)         
       cca(i) = cca(i) - ccc(i)*cca(i+1)      
    END DO

    !r      = 1.d0/(bcen2-cca(2)*ccc(1))
    !d(1)   = r*(d(2)-cca(2)*d(1))
    r = 1.d0/(1.d0-cca(2)*ccc(1))
    d(1) = r*(d(1)-ccc(1)*d(2))
    ccc(1) = -1.d0*r*ccc(1)*ccc(2)
    cca(1) = r*cca(1)

    aredsub(1) = cca(1)
    credsub(1) = ccc(1)
    dredsub(1) = d(1)
    aredsub(2) = cca(nsp)
    credsub(2) = ccc(nsp)
    dredsub(2) = d(nsp)

    ! Gather first and last entry and solver reduced tridiagonal problem with standard Thomas 
    CALL MPI_Gather(dredsub,2,MPI_REAL8,dred,2,MPI_REAL8,0,MPI_COMM_WORLD,ierr)
    CALL MPI_Gather(aredsub,2,MPI_REAL8,ared,2,MPI_REAL8,0,MPI_COMM_WORLD,ierr)
    CALL MPI_Gather(credsub,2,MPI_REAL8,cred,2,MPI_REAL8,0,MPI_COMM_WORLD,ierr)
    
    IF(myrank.EQ.0)THEN
       DO i = 2, Nred
          r = 1.d0/(1.d0 - ared(i)*cred(i-1))
          dred(i) = r*(dred(i) - ared(i)*dred(i-1))
          cred(i) = r*cred(i)
       END DO
       DO i = (Nred-1),1,-1
          dred(i) = dred(i)-cred(i)*dred(i+1)
       END DO
    ENDIF

    ! Scatter to cores and solve for remaining unknowns
    CALL MPI_Scatter(dred,2,MPI_REAL8,dredsub,2,MPI_REAL8,0,MPI_COMM_WORLD,ierr)

    CalcLaplacian(1) = dredsub(1)
    CalcLaplacian(nsp) = dredsub(2)
    DO i = 2, (nsp-1)
       CalcLaplacian(i) = d(i) - cca(i)*CalcLaplacian(1) - ccc(i)*CalcLaplacian(nsp)
    END DO
    
  END FUNCTION CalcLaplacian

  !--------------------------------------------------
  ! Calculate maximum diffusivity for zeta step
  SUBROUTINE calcFz(fzmax,zetarep,qL,Ey,nu,Co,mexp)
    IMPLICIT NONE
    REAL*8 :: Ey,nu,Co,mexp,qL,zetarep,fzmax,Cq,coeff,q

    q = zetarep*qL
    coeff = 0.125d0*((Ey/(1-nu*nu))**2) *qL*q*q
    Cq = Co*zetarep**mexp
    fzmax = coeff * Cq
    
    RETURN
  END SUBROUTINE calcFz
  
  !-------------------------------------------------
  SUBROUTINE PRINTPSD(nfile,Pszall,zetai,nsig,outstepsize)
    IMPLICIT NONE
    INTEGER nfile, nsig,outstepsize,si
    REAL*8 :: zetai
    REAL*8 :: Pszall(nsig),zetas(nsig)
    
    DO si = 1,nsig,outstepsize
       WRITE(nfile,401) Pszall(si)
    END DO
    WRITE(nfile,365) '# **',' above is for zeta ', zetai
    WRITE(nfile,'()')
    ENDFILE nfile
    BACKSPACE nfile

401 format (1X,E15.7)     ! 1_Pzeta
365 format (T1,A,A,E15.7)
    RETURN
  END SUBROUTINE PRINTPSD
  
  
  !--------------------------------------------------
  SUBROUTINE getdata(unit,line)
    IMPLICIT NONE
    INTEGER unit
    CHARACTER(200) :: line
    CHARACTER(1) :: char
    INTEGER i
    LOGICAL linecont

    char='#'
    linecont = .TRUE.
    DO WHILE(linecont)
       IF(char.EQ.'#')THEN
          read(unit,'(a)')line
          i=1
          char=line(1:1)
       ELSEIF(char.EQ.' ')THEN
          i=i+1
          char=line(i:i)
       ELSE
          linecont = .FALSE.
       ENDIF
    END DO
    
    RETURN
  END SUBROUTINE getdata
  
  !---------------------------------------------------
  SUBROUTINE readinput(wdir)
    INCLUDE 'mpif.h'
    INTEGER :: myrank, position, ierr
    CHARACTER(200) :: dataline, wdir
    INTEGER, PARAMETER :: psize = 512
    CHARACTER, DIMENSION(psize) ::  packed

    CALL MPI_COMM_RANK(MPI_COMM_WORLD,myrank,ierr)
    CALL MPI_COMM_SIZE(MPI_COMM_WORLD,size,ierr)

    position = 0
    IF(0.EQ.myrank)THEN
       CALL getdata(5,dataline)
       READ(dataline,'(a)') wdir    
    ENDIF
    CALL MPI_BCAST(wdir,200,MPI_CHARACTER, &
         0,MPI_COMM_WORLD,ierr)
    RETURN
  END SUBROUTINE readinput
  
END PROGRAM RoughDiff

